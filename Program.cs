using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using RT.Util;
using RT.Util.Consoles;
using RT.Util.ExtensionMethods;

namespace BfFastRoman
{
    class Program
    {
        static void Main(string[] args)
        {
            Ut.Tic();
            var rawcode = @"      A mandelbrot set fractal viewer in brainf*** written by Erik Bosman
+++++++++++++[->++>>>+++++>++>+<<<<<<]>>>>>++++++>--->>>>>>>>>>+++++++++++++++[[
>>>>>>>>>]+[<<<<<<<<<]>>>>>>>>>-]+[>>>>>>>>[-]>]<<<<<<<<<[<<<<<<<<<]>>>>>>>>[-]+
<<<<<<<+++++[-[->>>>>>>>>+<<<<<<<<<]>>>>>>>>>]>>>>>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>
>+<<<<<<<<<<<<<<<<<[<<<<<<<<<]>>>[-]+[>>>>>>[>>>>>>>[-]>>]<<<<<<<<<[<<<<<<<<<]>>
>>>>>[-]+<<<<<<++++[-[->>>>>>>>>+<<<<<<<<<]>>>>>>>>>]>>>>>>+<<<<<<+++++++[-[->>>
>>>>>>+<<<<<<<<<]>>>>>>>>>]>>>>>>+<<<<<<<<<<<<<<<<[<<<<<<<<<]>>>[[-]>>>>>>[>>>>>
>>[-<<<<<<+>>>>>>]<<<<<<[->>>>>>+<<+<<<+<]>>>>>>>>]<<<<<<<<<[<<<<<<<<<]>>>>>>>>>
[>>>>>>>>[-<<<<<<<+>>>>>>>]<<<<<<<[->>>>>>>+<<+<<<+<<]>>>>>>>>]<<<<<<<<<[<<<<<<<
<<]>>>>>>>[-<<<<<<<+>>>>>>>]<<<<<<<[->>>>>>>+<<+<<<<<]>>>>>>>>>+++++++++++++++[[
>>>>>>>>>]+>[-]>[-]>[-]>[-]>[-]>[-]>[-]>[-]>[-]<<<<<<<<<[<<<<<<<<<]>>>>>>>>>-]+[
>+>>>>>>>>]<<<<<<<<<[<<<<<<<<<]>>>>>>>>>[>->>>>[-<<<<+>>>>]<<<<[->>>>+<<<<<[->>[
-<<+>>]<<[->>+>>+<<<<]+>>>>>>>>>]<<<<<<<<[<<<<<<<<<]]>>>>>>>>>[>>>>>>>>>]<<<<<<<
<<[>[->>>>>>>>>+<<<<<<<<<]<<<<<<<<<<]>[->>>>>>>>>+<<<<<<<<<]<+>>>>>>>>]<<<<<<<<<
[>[-]<->>>>[-<<<<+>[<->-<<<<<<+>>>>>>]<[->+<]>>>>]<<<[->>>+<<<]<+<<<<<<<<<]>>>>>
>>>>[>+>>>>>>>>]<<<<<<<<<[<<<<<<<<<]>>>>>>>>>[>->>>>>[-<<<<<+>>>>>]<<<<<[->>>>>+
<<<<<<[->>>[-<<<+>>>]<<<[->>>+>+<<<<]+>>>>>>>>>]<<<<<<<<[<<<<<<<<<]]>>>>>>>>>[>>
>>>>>>>]<<<<<<<<<[>>[->>>>>>>>>+<<<<<<<<<]<<<<<<<<<<<]>>[->>>>>>>>>+<<<<<<<<<]<<
+>>>>>>>>]<<<<<<<<<[>[-]<->>>>[-<<<<+>[<->-<<<<<<+>>>>>>]<[->+<]>>>>]<<<[->>>+<<
<]<+<<<<<<<<<]>>>>>>>>>[>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>
>>>>>>>>>>>>>>>>>>>>>>>]>>>>>]<<<<<<<<<[<<<<<<<<<]>>>>>>>>>+++++++++++++++[[>>>>
>>>>>]<<<<<<<<<-<<<<<<<<<[<<<<<<<<<]>>>>>>>>>-]+>>>>>>>>>>>>>>>>>>>>>+<<<[<<<<<<
<<<]>>>>>>>>>[>>>[-<<<->>>]+<<<[->>>->[-<<<<+>>>>]<<<<[->>>>+<<<<<<<<<<<<<[<<<<<
<<<<]>>>>[-]+>>>>>[>>>>>>>>>]>+<]]+>>>>[-<<<<->>>>]+<<<<[->>>>-<[-<<<+>>>]<<<[->
>>+<<<<<<<<<<<<[<<<<<<<<<]>>>[-]+>>>>>>[>>>>>>>>>]>[-]+<]]+>[-<[>>>>>>>>>]<<<<<<
<<]>>>>>>>>]<<<<<<<<<[<<<<<<<<<]<<<<<<<[->+>>>-<<<<]>>>>>>>>>+++++++++++++++++++
+++++++>>[-<<<<+>>>>]<<<<[->>>>+<<[-]<<]>>[<<<<<<<+<[-<+>>>>+<<[-]]>[-<<[->+>>>-
<<<<]>>>]>>>>>>>>>>>>>[>>[-]>[-]>[-]>>>>>]<<<<<<<<<[<<<<<<<<<]>>>[-]>>>>>>[>>>>>
[-<<<<+>>>>]<<<<[->>>>+<<<+<]>>>>>>>>]<<<<<<<<<[<<<<<<<<<]>>>>>>>>>[>>[-<<<<<<<<
<+>>>>>>>>>]>>>>>>>]<<<<<<<<<[<<<<<<<<<]>>>>>>>>>+++++++++++++++[[>>>>>>>>>]+>[-
]>[-]>[-]>[-]>[-]>[-]>[-]>[-]>[-]<<<<<<<<<[<<<<<<<<<]>>>>>>>>>-]+[>+>>>>>>>>]<<<
<<<<<<[<<<<<<<<<]>>>>>>>>>[>->>>>>[-<<<<<+>>>>>]<<<<<[->>>>>+<<<<<<[->>[-<<+>>]<
<[->>+>+<<<]+>>>>>>>>>]<<<<<<<<[<<<<<<<<<]]>>>>>>>>>[>>>>>>>>>]<<<<<<<<<[>[->>>>
>>>>>+<<<<<<<<<]<<<<<<<<<<]>[->>>>>>>>>+<<<<<<<<<]<+>>>>>>>>]<<<<<<<<<[>[-]<->>>
[-<<<+>[<->-<<<<<<<+>>>>>>>]<[->+<]>>>]<<[->>+<<]<+<<<<<<<<<]>>>>>>>>>[>>>>>>[-<
<<<<+>>>>>]<<<<<[->>>>>+<<<<+<]>>>>>>>>]<<<<<<<<<[<<<<<<<<<]>>>>>>>>>[>+>>>>>>>>
]<<<<<<<<<[<<<<<<<<<]>>>>>>>>>[>->>>>>[-<<<<<+>>>>>]<<<<<[->>>>>+<<<<<<[->>[-<<+
>>]<<[->>+>>+<<<<]+>>>>>>>>>]<<<<<<<<[<<<<<<<<<]]>>>>>>>>>[>>>>>>>>>]<<<<<<<<<[>
[->>>>>>>>>+<<<<<<<<<]<<<<<<<<<<]>[->>>>>>>>>+<<<<<<<<<]<+>>>>>>>>]<<<<<<<<<[>[-
]<->>>>[-<<<<+>[<->-<<<<<<+>>>>>>]<[->+<]>>>>]<<<[->>>+<<<]<+<<<<<<<<<]>>>>>>>>>
[>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
]>>>>>]<<<<<<<<<[<<<<<<<<<]>>>>>>>>>[>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]>>>>>>]<<<<<<<<<[<<<<<<<<<]>>>>>>>>>++++++++
+++++++[[>>>>>>>>>]<<<<<<<<<-<<<<<<<<<[<<<<<<<<<]>>>>>>>>>-]+[>>>>>>>>[-<<<<<<<+
>>>>>>>]<<<<<<<[->>>>>>>+<<<<<<+<]>>>>>>>>]<<<<<<<<<[<<<<<<<<<]>>>>>>>>>[>>>>>>[
-]>>>]<<<<<<<<<[<<<<<<<<<]>>>>+>[-<-<<<<+>>>>>]>[-<<<<<<[->>>>>+<++<<<<]>>>>>[-<
<<<<+>>>>>]<->+>]<[->+<]<<<<<[->>>>>+<<<<<]>>>>>>[-]<<<<<<+>>>>[-<<<<->>>>]+<<<<
[->>>>->>>>>[>>[-<<->>]+<<[->>->[-<<<+>>>]<<<[->>>+<<<<<<<<<<<<[<<<<<<<<<]>>>[-]
+>>>>>>[>>>>>>>>>]>+<]]+>>>[-<<<->>>]+<<<[->>>-<[-<<+>>]<<[->>+<<<<<<<<<<<[<<<<<
<<<<]>>>>[-]+>>>>>[>>>>>>>>>]>[-]+<]]+>[-<[>>>>>>>>>]<<<<<<<<]>>>>>>>>]<<<<<<<<<
[<<<<<<<<<]>>>>[-<<<<+>>>>]<<<<[->>>>+>>>>>[>+>>[-<<->>]<<[->>+<<]>>>>>>>>]<<<<<
<<<+<[>[->>>>>+<<<<[->>>>-<<<<<<<<<<<<<<+>>>>>>>>>>>[->>>+<<<]<]>[->>>-<<<<<<<<<
<<<<<+>>>>>>>>>>>]<<]>[->>>>+<<<[->>>-<<<<<<<<<<<<<<+>>>>>>>>>>>]<]>[->>>+<<<]<<
<<<<<<<<<<]>>>>[-]<<<<]>>>[-<<<+>>>]<<<[->>>+>>>>>>[>+>[-<->]<[->+<]>>>>>>>>]<<<
<<<<<+<[>[->>>>>+<<<[->>>-<<<<<<<<<<<<<<+>>>>>>>>>>[->>>>+<<<<]>]<[->>>>-<<<<<<<
<<<<<<<+>>>>>>>>>>]<]>>[->>>+<<<<[->>>>-<<<<<<<<<<<<<<+>>>>>>>>>>]>]<[->>>>+<<<<
]<<<<<<<<<<<]>>>>>>+<<<<<<]]>>>>[-<<<<+>>>>]<<<<[->>>>+>>>>>[>>>>>>>>>]<<<<<<<<<
[>[->>>>>+<<<<[->>>>-<<<<<<<<<<<<<<+>>>>>>>>>>>[->>>+<<<]<]>[->>>-<<<<<<<<<<<<<<
+>>>>>>>>>>>]<<]>[->>>>+<<<[->>>-<<<<<<<<<<<<<<+>>>>>>>>>>>]<]>[->>>+<<<]<<<<<<<
<<<<<]]>[-]>>[-]>[-]>>>>>[>>[-]>[-]>>>>>>]<<<<<<<<<[<<<<<<<<<]>>>>>>>>>[>>>>>[-<
<<<+>>>>]<<<<[->>>>+<<<+<]>>>>>>>>]<<<<<<<<<[<<<<<<<<<]>>>>>>>>>+++++++++++++++[
[>>>>>>>>>]+>[-]>[-]>[-]>[-]>[-]>[-]>[-]>[-]>[-]<<<<<<<<<[<<<<<<<<<]>>>>>>>>>-]+
[>+>>>>>>>>]<<<<<<<<<[<<<<<<<<<]>>>>>>>>>[>->>>>[-<<<<+>>>>]<<<<[->>>>+<<<<<[->>
[-<<+>>]<<[->>+>+<<<]+>>>>>>>>>]<<<<<<<<[<<<<<<<<<]]>>>>>>>>>[>>>>>>>>>]<<<<<<<<
<[>[->>>>>>>>>+<<<<<<<<<]<<<<<<<<<<]>[->>>>>>>>>+<<<<<<<<<]<+>>>>>>>>]<<<<<<<<<[
>[-]<->>>[-<<<+>[<->-<<<<<<<+>>>>>>>]<[->+<]>>>]<<[->>+<<]<+<<<<<<<<<]>>>>>>>>>[
>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]>
>>>>>]<<<<<<<<<[<<<<<<<<<]>>>>>[-]>>>>+++++++++++++++[[>>>>>>>>>]<<<<<<<<<-<<<<<
<<<<[<<<<<<<<<]>>>>>>>>>-]+[>>>[-<<<->>>]+<<<[->>>->[-<<<<+>>>>]<<<<[->>>>+<<<<<
<<<<<<<<[<<<<<<<<<]>>>>[-]+>>>>>[>>>>>>>>>]>+<]]+>>>>[-<<<<->>>>]+<<<<[->>>>-<[-
<<<+>>>]<<<[->>>+<<<<<<<<<<<<[<<<<<<<<<]>>>[-]+>>>>>>[>>>>>>>>>]>[-]+<]]+>[-<[>>
>>>>>>>]<<<<<<<<]>>>>>>>>]<<<<<<<<<[<<<<<<<<<]>>>[-<<<+>>>]<<<[->>>+>>>>>>[>+>>>
[-<<<->>>]<<<[->>>+<<<]>>>>>>>>]<<<<<<<<+<[>[->+>[-<-<<<<<<<<<<+>>>>>>>>>>>>[-<<
+>>]<]>[-<<-<<<<<<<<<<+>>>>>>>>>>>>]<<<]>>[-<+>>[-<<-<<<<<<<<<<+>>>>>>>>>>>>]<]>
[-<<+>>]<<<<<<<<<<<<<]]>>>>[-<<<<+>>>>]<<<<[->>>>+>>>>>[>+>>[-<<->>]<<[->>+<<]>>
>>>>>>]<<<<<<<<+<[>[->+>>[-<<-<<<<<<<<<<+>>>>>>>>>>>[-<+>]>]<[-<-<<<<<<<<<<+>>>>
>>>>>>>]<<]>>>[-<<+>[-<-<<<<<<<<<<+>>>>>>>>>>>]>]<[-<+>]<<<<<<<<<<<<]>>>>>+<<<<<
]>>>>>>>>>[>>>[-]>[-]>[-]>>>>]<<<<<<<<<[<<<<<<<<<]>>>[-]>[-]>>>>>[>>>>>>>[-<<<<<
<+>>>>>>]<<<<<<[->>>>>>+<<<<+<<]>>>>>>>>]<<<<<<<<<[<<<<<<<<<]>>>>+>[-<-<<<<+>>>>
>]>>[-<<<<<<<[->>>>>+<++<<<<]>>>>>[-<<<<<+>>>>>]<->+>>]<<[->>+<<]<<<<<[->>>>>+<<
<<<]+>>>>[-<<<<->>>>]+<<<<[->>>>->>>>>[>>>[-<<<->>>]+<<<[->>>-<[-<<+>>]<<[->>+<<
<<<<<<<<<[<<<<<<<<<]>>>>[-]+>>>>>[>>>>>>>>>]>+<]]+>>[-<<->>]+<<[->>->[-<<<+>>>]<
<<[->>>+<<<<<<<<<<<<[<<<<<<<<<]>>>[-]+>>>>>>[>>>>>>>>>]>[-]+<]]+>[-<[>>>>>>>>>]<
<<<<<<<]>>>>>>>>]<<<<<<<<<[<<<<<<<<<]>>>[-<<<+>>>]<<<[->>>+>>>>>>[>+>[-<->]<[->+
<]>>>>>>>>]<<<<<<<<+<[>[->>>>+<<[->>-<<<<<<<<<<<<<+>>>>>>>>>>[->>>+<<<]>]<[->>>-
<<<<<<<<<<<<<+>>>>>>>>>>]<]>>[->>+<<<[->>>-<<<<<<<<<<<<<+>>>>>>>>>>]>]<[->>>+<<<
]<<<<<<<<<<<]>>>>>[-]>>[-<<<<<<<+>>>>>>>]<<<<<<<[->>>>>>>+<<+<<<<<]]>>>>[-<<<<+>
>>>]<<<<[->>>>+>>>>>[>+>>[-<<->>]<<[->>+<<]>>>>>>>>]<<<<<<<<+<[>[->>>>+<<<[->>>-
<<<<<<<<<<<<<+>>>>>>>>>>>[->>+<<]<]>[->>-<<<<<<<<<<<<<+>>>>>>>>>>>]<<]>[->>>+<<[
->>-<<<<<<<<<<<<<+>>>>>>>>>>>]<]>[->>+<<]<<<<<<<<<<<<]]>>>>[-]<<<<]>>>>[-<<<<+>>
>>]<<<<[->>>>+>[-]>>[-<<<<<<<+>>>>>>>]<<<<<<<[->>>>>>>+<<+<<<<<]>>>>>>>>>[>>>>>>
>>>]<<<<<<<<<[>[->>>>+<<<[->>>-<<<<<<<<<<<<<+>>>>>>>>>>>[->>+<<]<]>[->>-<<<<<<<<
<<<<<+>>>>>>>>>>>]<<]>[->>>+<<[->>-<<<<<<<<<<<<<+>>>>>>>>>>>]<]>[->>+<<]<<<<<<<<
<<<<]]>>>>>>>>>[>>[-]>[-]>>>>>>]<<<<<<<<<[<<<<<<<<<]>>>[-]>[-]>>>>>[>>>>>[-<<<<+
>>>>]<<<<[->>>>+<<<+<]>>>>>>>>]<<<<<<<<<[<<<<<<<<<]>>>>>>>>>[>>>>>>[-<<<<<+>>>>>
]<<<<<[->>>>>+<<<+<<]>>>>>>>>]<<<<<<<<<[<<<<<<<<<]>>>>>>>>>+++++++++++++++[[>>>>
>>>>>]+>[-]>[-]>[-]>[-]>[-]>[-]>[-]>[-]>[-]<<<<<<<<<[<<<<<<<<<]>>>>>>>>>-]+[>+>>
>>>>>>]<<<<<<<<<[<<<<<<<<<]>>>>>>>>>[>->>>>[-<<<<+>>>>]<<<<[->>>>+<<<<<[->>[-<<+
>>]<<[->>+>>+<<<<]+>>>>>>>>>]<<<<<<<<[<<<<<<<<<]]>>>>>>>>>[>>>>>>>>>]<<<<<<<<<[>
[->>>>>>>>>+<<<<<<<<<]<<<<<<<<<<]>[->>>>>>>>>+<<<<<<<<<]<+>>>>>>>>]<<<<<<<<<[>[-
]<->>>>[-<<<<+>[<->-<<<<<<+>>>>>>]<[->+<]>>>>]<<<[->>>+<<<]<+<<<<<<<<<]>>>>>>>>>
[>+>>>>>>>>]<<<<<<<<<[<<<<<<<<<]>>>>>>>>>[>->>>>>[-<<<<<+>>>>>]<<<<<[->>>>>+<<<<
<<[->>>[-<<<+>>>]<<<[->>>+>+<<<<]+>>>>>>>>>]<<<<<<<<[<<<<<<<<<]]>>>>>>>>>[>>>>>>
>>>]<<<<<<<<<[>>[->>>>>>>>>+<<<<<<<<<]<<<<<<<<<<<]>>[->>>>>>>>>+<<<<<<<<<]<<+>>>
>>>>>]<<<<<<<<<[>[-]<->>>>[-<<<<+>[<->-<<<<<<+>>>>>>]<[->+<]>>>>]<<<[->>>+<<<]<+
<<<<<<<<<]>>>>>>>>>[>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>>>>>]>>>>>]<<<<<<<<<[<<<<<<<<<]>>>>>>>>>+++++++++++++++[[>>>>>>>>
>]<<<<<<<<<-<<<<<<<<<[<<<<<<<<<]>>>>>>>>>-]+>>>>>>>>>>>>>>>>>>>>>+<<<[<<<<<<<<<]
>>>>>>>>>[>>>[-<<<->>>]+<<<[->>>->[-<<<<+>>>>]<<<<[->>>>+<<<<<<<<<<<<<[<<<<<<<<<
]>>>>[-]+>>>>>[>>>>>>>>>]>+<]]+>>>>[-<<<<->>>>]+<<<<[->>>>-<[-<<<+>>>]<<<[->>>+<
<<<<<<<<<<<[<<<<<<<<<]>>>[-]+>>>>>>[>>>>>>>>>]>[-]+<]]+>[-<[>>>>>>>>>]<<<<<<<<]>
>>>>>>>]<<<<<<<<<[<<<<<<<<<]>>->>[-<<<<+>>>>]<<<<[->>>>+<<[-]<<]>>]<<+>>>>[-<<<<
->>>>]+<<<<[->>>>-<<<<<<.>>]>>>>[-<<<<<<<.>>>>>>>]<<<[-]>[-]>[-]>[-]>[-]>[-]>>>[
>[-]>[-]>[-]>[-]>[-]>[-]>>>]<<<<<<<<<[<<<<<<<<<]>>>>>>>>>[>>>>>[-]>>>>]<<<<<<<<<
[<<<<<<<<<]>+++++++++++[-[->>>>>>>>>+<<<<<<<<<]>>>>>>>>>]>>>>+>>>>>>>>>+<<<<<<<<
<<<<<<[<<<<<<<<<]>>>>>>>[-<<<<<<<+>>>>>>>]<<<<<<<[->>>>>>>+[-]>>[>>>>>>>>>]<<<<<
<<<<[>>>>>>>[-<<<<<<+>>>>>>]<<<<<<[->>>>>>+<<<<<<<[<<<<<<<<<]>>>>>>>[-]+>>>]<<<<
<<<<<<]]>>>>>>>[-<<<<<<<+>>>>>>>]<<<<<<<[->>>>>>>+>>[>+>>>>[-<<<<->>>>]<<<<[->>>
>+<<<<]>>>>>>>>]<<+<<<<<<<[>>>>>[->>+<<]<<<<<<<<<<<<<<]>>>>>>>>>[>>>>>>>>>]<<<<<
<<<<[>[-]<->>>>>>>[-<<<<<<<+>[<->-<<<+>>>]<[->+<]>>>>>>>]<<<<<<[->>>>>>+<<<<<<]<
+<<<<<<<<<]>>>>>>>-<<<<[-]+<<<]+>>>>>>>[-<<<<<<<->>>>>>>]+<<<<<<<[->>>>>>>->>[>>
>>>[->>+<<]>>>>]<<<<<<<<<[>[-]<->>>>>>>[-<<<<<<<+>[<->-<<<+>>>]<[->+<]>>>>>>>]<<
<<<<[->>>>>>+<<<<<<]<+<<<<<<<<<]>+++++[-[->>>>>>>>>+<<<<<<<<<]>>>>>>>>>]>>>>+<<<
<<[<<<<<<<<<]>>>>>>>>>[>>>>>[-<<<<<->>>>>]+<<<<<[->>>>>->>[-<<<<<<<+>>>>>>>]<<<<
<<<[->>>>>>>+<<<<<<<<<<<<<<<<[<<<<<<<<<]>>>>[-]+>>>>>[>>>>>>>>>]>+<]]+>>>>>>>[-<
<<<<<<->>>>>>>]+<<<<<<<[->>>>>>>-<<[-<<<<<+>>>>>]<<<<<[->>>>>+<<<<<<<<<<<<<<[<<<
<<<<<<]>>>[-]+>>>>>>[>>>>>>>>>]>[-]+<]]+>[-<[>>>>>>>>>]<<<<<<<<]>>>>>>>>]<<<<<<<
<<[<<<<<<<<<]>>>>[-]<<<+++++[-[->>>>>>>>>+<<<<<<<<<]>>>>>>>>>]>>>>-<<<<<[<<<<<<<
<<]]>>>]<<<<.>>>>>>>>>>[>>>>>>[-]>>>]<<<<<<<<<[<<<<<<<<<]>++++++++++[-[->>>>>>>>
>+<<<<<<<<<]>>>>>>>>>]>>>>>+>>>>>>>>>+<<<<<<<<<<<<<<<[<<<<<<<<<]>>>>>>>>[-<<<<<<
<<+>>>>>>>>]<<<<<<<<[->>>>>>>>+[-]>[>>>>>>>>>]<<<<<<<<<[>>>>>>>>[-<<<<<<<+>>>>>>
>]<<<<<<<[->>>>>>>+<<<<<<<<[<<<<<<<<<]>>>>>>>>[-]+>>]<<<<<<<<<<]]>>>>>>>>[-<<<<<
<<<+>>>>>>>>]<<<<<<<<[->>>>>>>>+>[>+>>>>>[-<<<<<->>>>>]<<<<<[->>>>>+<<<<<]>>>>>>
>>]<+<<<<<<<<[>>>>>>[->>+<<]<<<<<<<<<<<<<<<]>>>>>>>>>[>>>>>>>>>]<<<<<<<<<[>[-]<-
>>>>>>>>[-<<<<<<<<+>[<->-<<+>>]<[->+<]>>>>>>>>]<<<<<<<[->>>>>>>+<<<<<<<]<+<<<<<<
<<<]>>>>>>>>-<<<<<[-]+<<<]+>>>>>>>>[-<<<<<<<<->>>>>>>>]+<<<<<<<<[->>>>>>>>->[>>>
>>>[->>+<<]>>>]<<<<<<<<<[>[-]<->>>>>>>>[-<<<<<<<<+>[<->-<<+>>]<[->+<]>>>>>>>>]<<
<<<<<[->>>>>>>+<<<<<<<]<+<<<<<<<<<]>+++++[-[->>>>>>>>>+<<<<<<<<<]>>>>>>>>>]>>>>>
+>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<[<<<<<<<<<]>>>>>>>>>[>>>>>>[-<<<<<<->>>>>>]+<
<<<<<[->>>>>>->>[-<<<<<<<<+>>>>>>>>]<<<<<<<<[->>>>>>>>+<<<<<<<<<<<<<<<<<[<<<<<<<
<<]>>>>[-]+>>>>>[>>>>>>>>>]>+<]]+>>>>>>>>[-<<<<<<<<->>>>>>>>]+<<<<<<<<[->>>>>>>>
-<<[-<<<<<<+>>>>>>]<<<<<<[->>>>>>+<<<<<<<<<<<<<<<[<<<<<<<<<]>>>[-]+>>>>>>[>>>>>>
>>>]>[-]+<]]+>[-<[>>>>>>>>>]<<<<<<<<]>>>>>>>>]<<<<<<<<<[<<<<<<<<<]>>>>[-]<<<++++
+[-[->>>>>>>>>+<<<<<<<<<]>>>>>>>>>]>>>>>->>>>>>>>>>>>>>>>>>>>>>>>>>>-<<<<<<[<<<<
<<<<<]]>>>]".Replace("\r\n", "").Replace("[<->-<<<<<<+>>>>>>]", "[-<-<<<<<+>>>>>>]").Replace("[<->-<<<<<<<+>>>>>>>]", "[-<-<<<<<<+>>>>>>>]");
            rawcode = Regex.Replace(rawcode, @"\[<->-(<+)\+(>+)\]", m => m.Groups[1].Length == m.Groups[2].Length ? $"[-<-{new string('<', m.Groups[1].Length - 1)}+{new string('>', m.Groups[1].Length)}]" : m.Value);
            //rawcode = "++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.";

            var p = new string(rawcode.Where(c => c == '[' || c == ']' || c == '>' || c == '<' || c == '+' || c == '-' || c == '.' || c == ',').ToArray());
            //p = "+<[-<+>>>>+<<[-]]";
            pos = 0;
            var parsed = parse(p).ToList();
            var serialized = string.Join("", parsed.Select(p => p.ToString()));
            if (p != serialized)
                throw new Exception();
            var optimized = optimize(parsed);
            serialized = string.Join("", optimized.Select(p => p.ToString()));
            if (p != serialized)
            {
                int errorPos = 0;
                while (p[errorPos] == serialized[errorPos++])
                    ;
                throw new Exception();
            }
            var compiled = compile(optimized);
            compiled.Add(i_end);

#if DEBUG
            //var allInstrs = recurse(optimized).ToList();
            //var positions = allInstrs.OrderBy(i => i.CompiledPos).Select(i => i.CompiledPos).ToList();
            var heat = new[] { 1, 0, 1, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 13, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 15, 0, 15, 0, 15, 0, 15, 0, 15, 0, 15, 15, 0, 1, 0, 1, 0, 16, 0, 16, 0, 16, 16, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 5, 0, 5, 0, 5, 0, 5, 5, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 28, 0, 28, 0, 448, 0, 448, 0, 448, 448, 0, 28, 0, 28, 0, 28, 0, 28, 0, 28, 0, 28, 0, 112, 0, 112, 0, 112, 0, 112, 112, 0, 28, 0, 28, 0, 28, 0, 28, 0, 196, 0, 196, 0, 196, 0, 196, 196, 0, 28, 0, 28, 0, 28, 0, 28, 0, 28, 0, 0, 3546, 0, 3546, 0, 3546, 0, 56736, 0, 56736, 0, 56736, 0, 56736, 0, 13667, 0, 13667, 0, 13667, 0, 13667, 0, 56736, 56736, 0, 56736, 0, 56736, 56736, 0, 3546, 0, 3546, 0, 3546, 0, 3546, 0, 56736, 0, 56736, 0, 56736, 0, 56736, 0, 10059, 0, 10059, 0, 10059, 0, 10059, 0, 56736, 56736, 0, 56736, 0, 56736, 56736, 0, 3546, 0, 3546, 0, 3546, 0, 3546, 0, 3546, 0, 3546, 0, 2412, 0, 2412, 0, 2412, 0, 3546, 3546, 0, 3546, 0, 3546, 0, 3546, 0, 56736, 0, 56736, 0, 56736, 0, 56736, 0, 56736, 0, 56736, 0, 56736, 0, 56736, 0, 56736, 0, 56736, 0, 56736, 0, 56736, 0, 56736, 0, 56736, 0, 56736, 0, 56736, 56736, 0, 3546, 0, 3546, 0, 113472, 0, 113472, 0, 113472, 113472, 0, 3546, 0, 3546, 0, 3546, 0, 3546, 0, 113472, 0, 113472, 0, 113472, 0, 113472, 0, 113472, 0, 13667, 0, 13667, 0, 13667, 0, 332941, 0, 332941, 0, 332941, 0, 332941, 0, 59521, 0, 59521, 0, 59521, 0, 332941, 332941, 0, 332941, 0, 332941, 332941, 0, 13667, 0, 13667, 0, 113472, 113472, 0, 113472, 0, 113472, 0, 113472, 0, 113472, 0, 0, 113472, 0, 113472, 0, 113472, 0, 113472, 0, 113472, 113472, 0, 3546, 0, 3546, 0, 113472, 0, 113472, 0, 113472, 0, 113472, 0, 99222, 0, 99222, 0, 99222, 0, 39701, 0, 39701, 0, 39701, 0, 39701, 0, 99222, 99222, 0, 99222, 0, 99222, 0, 99222, 0, 178305, 178305, 0, 113472, 0, 113472, 0, 113472, 0, 113472, 0, 113472, 113472, 0, 3546, 0, 3546, 0, 113472, 0, 113472, 0, 113472, 113472, 0, 3546, 0, 3546, 0, 3546, 0, 3546, 0, 113472, 0, 113472, 0, 113472, 0, 113472, 0, 113472, 0, 10059, 0, 10059, 0, 10059, 0, 246384, 0, 246384, 0, 246384, 0, 246384, 0, 33663, 0, 33663, 0, 33663, 0, 246384, 246384, 0, 246384, 0, 246384, 246384, 0, 10059, 0, 10059, 0, 113472, 113472, 0, 113472, 0, 113472, 0, 113472, 0, 113472, 0, 0, 113472, 0, 113472, 0, 113472, 0, 113472, 0, 113472, 113472, 0, 3546, 0, 3546, 0, 113472, 0, 113472, 0, 113472, 0, 113472, 0, 83061, 0, 83061, 0, 83061, 0, 29578, 0, 29578, 0, 29578, 0, 29578, 0, 83061, 83061, 0, 83061, 0, 83061, 0, 83061, 0, 160244, 160244, 0, 113472, 0, 113472, 0, 113472, 0, 113472, 0, 113472, 113472, 0, 3546, 0, 3546, 0, 113472, 0, 113472, 0, 113472, 0, 113472, 113472, 0, 3546, 0, 3546, 0, 3546, 0, 3546, 0, 3546, 0, 56736, 0, 56736, 0, 56736, 0, 56736, 0, 56736, 0, 56736, 0, 56736, 56736, 0, 3546, 0, 3546, 0, 3546, 0, 3546, 0, 3546, 0, 11322, 0, 11322, 0, 3546, 0, 3546, 0, 11322, 11322, 0, 11322, 0, 11322, 0, 7776, 0, 7776, 0, 7776, 0, 7776, 0, 7776, 0, 153, 0, 153, 0, 153, 0, 153, 0, 153, 0, 153, 0, 153, 0, 153, 0, 7776, 7776, 0, 11322, 11322, 0, 11322, 0, 11322, 0, 306, 0, 306, 0, 11322, 11322, 0, 11322, 0, 11322, 0, 11016, 0, 11016, 0, 11016, 0, 11016, 0, 11016, 0, 3393, 0, 3393, 0, 3393, 0, 3393, 0, 3393, 0, 3393, 0, 3393, 0, 3393, 0, 11016, 11016, 0, 11322, 11322, 0, 11322, 0, 11322, 0, 3546, 0, 3546, 0, 3546, 0, 11322, 11322, 0, 11322, 0, 11322, 11322, 0, 3546, 0, 3546, 0, 3546, 0, 3546, 0, 35121, 0, 35121, 0, 35121, 0, 35275, 35275, 0, 3546, 0, 3546, 0, 3546, 0, 3546, 0, 3546, 0, 153, 0, 153, 0, 153, 0, 153, 0, 3546, 3546, 0, 3546, 0, 3546, 0, 0, 35128, 0, 35128, 0, 35128, 0, 35128, 0, 35128, 0, 35128, 0, 35128, 0, 35128, 35128, 0, 35128, 0, 35128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35128, 35128, 0, 35128, 0, 35128, 0, 562048, 0, 562048, 0, 562048, 0, 562048, 0, 562048, 562048, 0, 35128, 0, 35128, 0, 35128, 0, 35128, 0, 35128, 0, 562048, 0, 562048, 0, 562048, 0, 562048, 0, 173006, 0, 173006, 0, 173006, 0, 562048, 562048, 0, 562048, 0, 562048, 562048, 0, 35128, 0, 35128, 0, 35128, 0, 35128, 0, 0, 35128, 0, 35128, 0, 35128, 0, 35128, 0, 35128, 0, 562048, 0, 562048, 0, 562048, 0, 562048, 0, 562048, 0, 562048, 0, 562048, 0, 562048, 0, 562048, 0, 562048, 0, 562048, 0, 562048, 0, 562048, 0, 562048, 0, 562048, 0, 562048, 562048, 0, 35128, 0, 35128, 0, 1124096, 0, 1124096, 0, 1124096, 1124096, 0, 35128, 0, 35128, 0, 35128, 0, 35128, 0, 1124096, 0, 1124096, 0, 1124096, 0, 1124096, 0, 1124096, 0, 152488, 0, 152488, 0, 152488, 0, 3309768, 0, 3309768, 0, 3309768, 0, 3309768, 0, 755232, 0, 755232, 0, 755232, 0, 3309768, 3309768, 0, 3309768, 0, 3309768, 3309768, 0, 152488, 0, 152488, 0, 1124096, 1124096, 0, 1124096, 0, 1124096, 0, 1124096, 0, 1124096, 0, 0, 1124096, 0, 1124096, 0, 1124096, 0, 1124096, 0, 1124096, 1124096, 0, 35128, 0, 35128, 0, 1124096, 0, 1124096, 0, 1124096, 0, 1124096, 0, 1231937, 0, 1231937, 0, 1231937, 0, 476705, 0, 476705, 0, 476705, 0, 476705, 0, 1231937, 1231937, 0, 1231937, 0, 1231937, 0, 1231937, 0, 1891532, 1891532, 0, 1124096, 0, 1124096, 0, 1124096, 0, 1124096, 0, 1124096, 1124096, 0, 35128, 0, 35128, 0, 1124081, 0, 1124080, 0, 1124080, 0, 1124080, 0, 152488, 0, 152488, 0, 152488, 0, 1124080, 1124080, 0, 1124080, 0, 1124080, 1124080, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 1124064, 0, 1124064, 0, 1124064, 1124064, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 152484, 0, 152484, 0, 152484, 0, 3309686, 0, 3309686, 0, 3309686, 0, 3309686, 0, 801752, 0, 801752, 0, 801752, 0, 3309686, 3309686, 0, 3309686, 0, 3309686, 3309686, 0, 152484, 0, 152484, 0, 1124064, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 1124064, 0, 35127, 0, 35127, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1362163, 0, 1362163, 0, 1362163, 0, 560411, 0, 560411, 0, 560411, 0, 560411, 0, 1362163, 1362163, 0, 1362163, 0, 1362163, 0, 1362163, 0, 2061617, 2061617, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 1124064, 0, 35127, 0, 35127, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 1124064, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 1124064, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 562032, 0, 35127, 0, 35127, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 86345, 0, 86345, 0, 86345, 0, 562032, 562032, 0, 562032, 0, 562032, 562032, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 562032, 0, 562032, 0, 562032, 562032, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 24932, 0, 24932, 0, 24932, 0, 35127, 35127, 0, 35127, 0, 35127, 0, 6042, 0, 6042, 0, 3589, 0, 3589, 0, 3589, 0, 6042, 6042, 0, 6042, 0, 6042, 0, 6042, 0, 6042, 0, 6042, 0, 35127, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 11331, 0, 11331, 0, 35127, 35127, 0, 35127, 0, 35127, 0, 0, 23796, 0, 23796, 0, 23796, 0, 191326, 0, 191326, 0, 18667, 0, 18667, 0, 191326, 191326, 0, 191326, 0, 191326, 0, 172659, 0, 172659, 0, 172659, 0, 172659, 0, 172659, 0, 6830, 0, 6830, 0, 6830, 0, 6830, 0, 6830, 0, 6830, 0, 6830, 0, 6830, 0, 172659, 172659, 0, 191326, 191326, 0, 191326, 0, 191326, 0, 10320, 0, 10320, 0, 191326, 191326, 0, 191326, 0, 191326, 0, 181006, 0, 181006, 0, 181006, 0, 181006, 0, 181006, 0, 15177, 0, 15177, 0, 15177, 0, 15177, 0, 15177, 0, 15177, 0, 15177, 0, 15177, 0, 181006, 181006, 0, 191326, 191326, 0, 191326, 0, 191326, 0, 22007, 0, 22007, 0, 22007, 0, 191326, 191326, 0, 191326, 0, 191326, 191326, 0, 23796, 0, 23796, 0, 23796, 0, 23796, 0, 23796, 0, 23796, 0, 15177, 0, 15177, 0, 15177, 0, 242832, 0, 242832, 0, 242832, 0, 61374, 0, 61374, 0, 242832, 242832, 0, 242832, 0, 242832, 0, 242832, 0, 242832, 242832, 0, 15177, 0, 15177, 0, 15177, 0, 242832, 0, 242832, 0, 150500, 0, 150500, 0, 150500, 0, 14769, 0, 14769, 0, 14769, 0, 14769, 0, 14769, 0, 150500, 150500, 0, 150500, 0, 150500, 0, 117883, 0, 117883, 0, 117883, 0, 150500, 150500, 0, 150500, 0, 242832, 242832, 0, 242832, 0, 242832, 0, 26090, 0, 26090, 0, 26090, 0, 17848, 0, 17848, 0, 17848, 0, 26090, 26090, 0, 26090, 0, 242832, 242832, 0, 242832, 0, 242832, 0, 242832, 0, 242832, 242832, 0, 15177, 0, 15177, 0, 23796, 23796, 0, 23796, 0, 23796, 0, 23796, 0, 23796, 0, 6830, 0, 6830, 0, 6830, 0, 109280, 0, 109280, 0, 109280, 0, 18015, 0, 18015, 0, 109280, 109280, 0, 109280, 0, 109280, 0, 109280, 0, 109280, 109280, 0, 6830, 0, 6830, 0, 6830, 0, 109280, 0, 109280, 0, 95680, 0, 95680, 0, 95680, 0, 29721, 0, 29721, 0, 29721, 0, 29721, 0, 29721, 0, 95680, 95680, 0, 95680, 0, 95680, 0, 59856, 0, 59856, 0, 59856, 0, 95680, 95680, 0, 95680, 0, 109280, 109280, 0, 109280, 0, 109280, 0, 8317, 0, 8317, 0, 8317, 0, 6103, 0, 6103, 0, 6103, 0, 8317, 8317, 0, 8317, 0, 109280, 109280, 0, 109280, 0, 109280, 0, 109280, 0, 109280, 109280, 0, 6830, 0, 6830, 0, 23796, 23796, 0, 35127, 35127, 0, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 11331, 0, 11331, 0, 11331, 0, 11331, 0, 11331, 0, 181296, 0, 181296, 0, 17446, 0, 17446, 0, 17446, 0, 6667, 0, 6667, 0, 6667, 0, 6667, 0, 6667, 0, 17446, 17446, 0, 17446, 0, 17446, 0, 3109, 0, 3109, 0, 3109, 0, 17446, 17446, 0, 17446, 0, 181296, 181296, 0, 181296, 0, 181296, 0, 20774, 0, 20774, 0, 20774, 0, 7670, 0, 7670, 0, 7670, 0, 20774, 20774, 0, 20774, 0, 181296, 181296, 0, 181296, 0, 181296, 0, 181296, 0, 181296, 181296, 0, 35127, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 562032, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 173001, 0, 173001, 0, 173001, 0, 562032, 562032, 0, 562032, 0, 562032, 562032, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 562032, 0, 35127, 0, 35127, 0, 1124064, 0, 1124064, 0, 1124064, 1124064, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 173001, 0, 173001, 0, 173001, 0, 3790893, 0, 3790893, 0, 3790893, 0, 3790893, 0, 944987, 0, 944987, 0, 944987, 0, 3790893, 3790893, 0, 3790893, 0, 3790893, 3790893, 0, 173001, 0, 173001, 0, 1124064, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 1124064, 0, 35127, 0, 35127, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1612962, 0, 1612962, 0, 1612962, 0, 667975, 0, 667975, 0, 667975, 0, 667975, 0, 1612962, 1612962, 0, 1612962, 0, 1612962, 0, 1612962, 0, 2248090, 2248090, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 1124064, 0, 35127, 0, 35127, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 1124064, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 562032, 0, 35127, 0, 35127, 0, 284423, 0, 284423, 0, 25637, 0, 25637, 0, 284423, 284423, 0, 284423, 0, 284423, 0, 258786, 0, 258786, 0, 258786, 0, 258786, 0, 258786, 0, 13950, 0, 13950, 0, 13950, 0, 13950, 0, 13950, 0, 13950, 0, 13950, 0, 13950, 0, 258786, 258786, 0, 284423, 284423, 0, 284423, 0, 284423, 0, 18588, 0, 18588, 0, 284423, 284423, 0, 284423, 0, 284423, 0, 265835, 0, 265835, 0, 265835, 0, 265835, 0, 265835, 0, 20999, 0, 20999, 0, 20999, 0, 20999, 0, 20999, 0, 20999, 0, 20999, 0, 20999, 0, 265835, 265835, 0, 284423, 284423, 0, 284423, 0, 284423, 0, 34949, 0, 34949, 0, 34949, 0, 284423, 284423, 0, 284423, 0, 284423, 284423, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 20999, 0, 20999, 0, 20999, 0, 335984, 0, 335984, 0, 335984, 0, 56384, 0, 56384, 0, 335984, 335984, 0, 335984, 0, 335984, 0, 335984, 0, 335984, 335984, 0, 20999, 0, 20999, 0, 20999, 0, 335984, 0, 335984, 0, 284256, 0, 284256, 0, 284256, 0, 76087, 0, 76087, 0, 76087, 0, 76087, 0, 76087, 0, 284256, 284256, 0, 284256, 0, 284256, 0, 189314, 0, 189314, 0, 189314, 0, 284256, 284256, 0, 284256, 0, 335984, 335984, 0, 335984, 0, 335984, 0, 27468, 0, 27468, 0, 27468, 0, 18855, 0, 18855, 0, 18855, 0, 27468, 27468, 0, 27468, 0, 335984, 335984, 0, 335984, 0, 335984, 0, 335984, 0, 335984, 335984, 0, 35127, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 13950, 0, 13950, 0, 13950, 0, 223200, 0, 223200, 0, 223200, 0, 43745, 0, 43745, 0, 223200, 223200, 0, 223200, 0, 223200, 0, 223200, 0, 223200, 223200, 0, 13950, 0, 13950, 0, 13950, 0, 223200, 0, 223200, 0, 182580, 0, 182580, 0, 182580, 0, 43434, 0, 43434, 0, 43434, 0, 43434, 0, 43434, 0, 182580, 182580, 0, 182580, 0, 182580, 0, 125035, 0, 125035, 0, 125035, 0, 182580, 182580, 0, 182580, 0, 223200, 223200, 0, 223200, 0, 223200, 0, 21166, 0, 21166, 0, 21166, 0, 14111, 0, 14111, 0, 14111, 0, 21166, 21166, 0, 21166, 0, 223200, 223200, 0, 223200, 0, 223200, 0, 223200, 0, 223200, 223200, 0, 13950, 0, 13950, 0, 35127, 35127, 0, 35127, 0, 35127, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 562032, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 118396, 0, 118396, 0, 118396, 0, 562032, 562032, 0, 562032, 0, 562032, 562032, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 13950, 0, 13950, 0, 13950, 0, 35127, 35127, 0, 35127, 0, 35127, 0, 26319, 0, 26319, 0, 8166, 0, 8166, 0, 8166, 0, 26319, 26319, 0, 26319, 0, 26319, 0, 26319, 0, 26319, 0, 26319, 0, 35127, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 11190, 0, 11190, 0, 35127, 35127, 0, 35127, 0, 35127, 0, 0, 23937, 0, 23937, 0, 23937, 0, 167260, 0, 167260, 0, 25202, 0, 25202, 0, 167260, 167260, 0, 167260, 0, 167260, 0, 142058, 0, 142058, 0, 142058, 0, 142058, 0, 142058, 0, 6730, 0, 6730, 0, 6730, 0, 6730, 0, 6730, 0, 6730, 0, 6730, 0, 6730, 0, 142058, 142058, 0, 167260, 167260, 0, 167260, 0, 167260, 0, 14767, 0, 14767, 0, 167260, 167260, 0, 167260, 0, 167260, 0, 152493, 0, 152493, 0, 152493, 0, 152493, 0, 152493, 0, 17165, 0, 17165, 0, 17165, 0, 17165, 0, 17165, 0, 17165, 0, 17165, 0, 17165, 0, 152493, 152493, 0, 167260, 167260, 0, 167260, 0, 167260, 0, 23895, 0, 23895, 0, 23895, 0, 167260, 167260, 0, 167260, 0, 167260, 167260, 0, 23937, 0, 23937, 0, 23937, 0, 23937, 0, 23937, 0, 23937, 0, 17165, 0, 17165, 0, 17165, 0, 274640, 0, 274640, 0, 274640, 0, 73172, 0, 73172, 0, 274640, 274640, 0, 274640, 0, 274640, 0, 274640, 0, 274640, 274640, 0, 17165, 0, 17165, 0, 17165, 0, 274640, 0, 274640, 0, 175977, 0, 175977, 0, 175977, 0, 26219, 0, 26219, 0, 26219, 0, 26219, 0, 26219, 0, 175977, 175977, 0, 175977, 0, 175977, 0, 126801, 0, 126801, 0, 126801, 0, 175977, 175977, 0, 175977, 0, 274640, 274640, 0, 274640, 0, 274640, 0, 34698, 0, 34698, 0, 34698, 0, 22957, 0, 22957, 0, 22957, 0, 34698, 34698, 0, 34698, 0, 274640, 274640, 0, 274640, 0, 274640, 0, 274640, 0, 274640, 274640, 0, 17165, 0, 17165, 0, 17165, 0, 17165, 0, 17165, 0, 14067, 0, 14067, 0, 14067, 0, 17165, 17165, 0, 23937, 23937, 0, 23937, 0, 23937, 0, 23937, 0, 23937, 0, 6730, 0, 6730, 0, 6730, 0, 107680, 0, 107680, 0, 107680, 0, 22876, 0, 22876, 0, 107680, 107680, 0, 107680, 0, 107680, 0, 107680, 0, 107680, 107680, 0, 6730, 0, 6730, 0, 6730, 0, 107680, 0, 107680, 0, 91288, 0, 91288, 0, 91288, 0, 29491, 0, 29491, 0, 29491, 0, 29491, 0, 29491, 0, 91288, 91288, 0, 91288, 0, 91288, 0, 55035, 0, 55035, 0, 55035, 0, 91288, 91288, 0, 91288, 0, 107680, 107680, 0, 107680, 0, 107680, 0, 9801, 0, 9801, 0, 9801, 0, 6762, 0, 6762, 0, 6762, 0, 9801, 9801, 0, 9801, 0, 107680, 107680, 0, 107680, 0, 107680, 0, 107680, 0, 107680, 107680, 0, 23937, 23937, 0, 23937, 0, 23937, 0, 35127, 35127, 0, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 11190, 0, 11190, 0, 11190, 0, 11190, 0, 11190, 0, 11190, 0, 11190, 0, 8166, 0, 8166, 0, 8166, 0, 11190, 11190, 0, 11190, 0, 11190, 0, 11190, 0, 11190, 0, 179040, 0, 179040, 0, 21560, 0, 21560, 0, 21560, 0, 7163, 0, 7163, 0, 7163, 0, 7163, 0, 7163, 0, 21560, 21560, 0, 21560, 0, 21560, 0, 5749, 0, 5749, 0, 5749, 0, 21560, 21560, 0, 21560, 0, 179040, 179040, 0, 179040, 0, 179040, 0, 40712, 0, 40712, 0, 40712, 0, 8648, 0, 8648, 0, 8648, 0, 40712, 40712, 0, 40712, 0, 179040, 179040, 0, 179040, 0, 179040, 0, 179040, 0, 179040, 179040, 0, 35127, 35127, 0, 35127, 0, 35127, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 562032, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 180099, 0, 180099, 0, 180099, 0, 562032, 562032, 0, 562032, 0, 562032, 562032, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 161854, 0, 161854, 0, 161854, 0, 562032, 562032, 0, 562032, 0, 562032, 562032, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 562032, 0, 35127, 0, 35127, 0, 1124064, 0, 1124064, 0, 1124064, 1124064, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 180099, 0, 180099, 0, 180099, 0, 3928684, 0, 3928684, 0, 3928684, 0, 3928684, 0, 1018317, 0, 1018317, 0, 1018317, 0, 3928684, 3928684, 0, 3928684, 0, 3928684, 3928684, 0, 180099, 0, 180099, 0, 1124064, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 1124064, 0, 35127, 0, 35127, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1745279, 0, 1745279, 0, 1745279, 0, 726962, 0, 726962, 0, 726962, 0, 726962, 0, 1745279, 1745279, 0, 1745279, 0, 1745279, 0, 1745279, 0, 2353290, 2353290, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 1124064, 0, 35127, 0, 35127, 0, 1124064, 0, 1124064, 0, 1124064, 1124064, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 161854, 0, 161854, 0, 161854, 0, 3502573, 0, 3502573, 0, 3502573, 0, 3502573, 0, 890466, 0, 890466, 0, 890466, 0, 3502573, 3502573, 0, 3502573, 0, 3502573, 3502573, 0, 161854, 0, 161854, 0, 1124064, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 1124064, 0, 35127, 0, 35127, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 2014841, 0, 2014841, 0, 2014841, 0, 833020, 0, 833020, 0, 833020, 0, 833020, 0, 2014841, 2014841, 0, 2014841, 0, 2014841, 0, 2014841, 0, 2543909, 2543909, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 1124064, 0, 35127, 0, 35127, 0, 1124064, 0, 1124064, 0, 1124064, 0, 1124064, 1124064, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 0, 562032, 562032, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 107068, 0, 107068, 0, 34012, 0, 34012, 0, 107068, 107068, 0, 107068, 0, 107068, 0, 73056, 0, 73056, 0, 73056, 0, 73056, 0, 73056, 0, 2404, 0, 2404, 0, 2404, 0, 2404, 0, 2404, 0, 2404, 0, 2404, 0, 2404, 0, 73056, 73056, 0, 107068, 107068, 0, 107068, 0, 107068, 0, 3694, 0, 3694, 0, 107068, 107068, 0, 107068, 0, 107068, 0, 103374, 0, 103374, 0, 103374, 0, 103374, 0, 103374, 0, 32722, 0, 32722, 0, 32722, 0, 32722, 0, 32722, 0, 32722, 0, 32722, 0, 32722, 0, 103374, 103374, 0, 107068, 107068, 0, 107068, 0, 107068, 0, 35126, 0, 35126, 0, 35126, 0, 107068, 107068, 0, 107068, 0, 107068, 107068, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 35127, 0, 2404, 0, 2404, 0, 2404, 0, 2404, 0, 35127, 35127, 0, 35127, 0, 35280, 35280, 0, 0, 3545, 0, 3545, 0, 3545, 0, 2557, 0, 2557, 0, 3545, 3545, 0, 3545, 0, 3545, 0, 988, 0, 988, 0, 988, 988, 0, 3545, 3545, 0, 3545, 0, 3545, 0, 2557, 0, 2557, 2557, 0, 3545, 3545, 0, 3545, 0, 3545, 0, 3545, 0, 3545, 0, 3545, 0, 3545, 0, 3545, 0, 3545, 0, 56720, 0, 56720, 0, 56720, 0, 56720, 0, 56720, 0, 56720, 0, 56720, 0, 56720, 56720, 0, 3545, 0, 3545, 0, 3545, 0, 3545, 0, 56720, 0, 56720, 0, 56720, 56720, 0, 3545, 0, 3545, 0, 3545, 0, 3545, 0, 3545, 0, 38995, 0, 38995, 0, 38995, 0, 38995, 38995, 0, 3545, 0, 3545, 0, 3545, 0, 3545, 0, 3545, 0, 3545, 0, 3545, 0, 3545, 0, 2411, 0, 2411, 0, 2411, 0, 2411, 0, 2411, 0, 2411, 0, 2411, 0, 14626, 0, 14626, 0, 14626, 0, 14626, 0, 2384, 0, 2384, 0, 2384, 0, 2384, 0, 2384, 0, 14626, 14626, 0, 14626, 0, 14626, 14626, 0, 3545, 3545, 0, 3545, 0, 3545, 0, 3545, 0, 3545, 0, 2384, 0, 2384, 0, 2384, 0, 38144, 0, 38144, 0, 38144, 0, 4768, 0, 4768, 0, 38144, 38144, 0, 38144, 0, 38144, 0, 38144, 0, 38144, 38144, 0, 2384, 0, 2384, 0, 2384, 0, 38144, 0, 38144, 0, 38144, 0, 38144, 38144, 0, 2384, 0, 2384, 0, 2384, 0, 2384, 0, 38144, 0, 38144, 0, 38144, 0, 38144, 0, 76421, 0, 76421, 0, 76421, 0, 33430, 0, 33430, 0, 33430, 0, 33430, 0, 76421, 76421, 0, 76421, 0, 76421, 0, 76421, 0, 77003, 77003, 0, 38144, 0, 38144, 0, 38144, 0, 38144, 0, 38144, 38144, 0, 2384, 0, 2384, 0, 2384, 0, 2384, 0, 3545, 3545, 0, 3545, 0, 3545, 0, 2384, 0, 2384, 0, 3545, 3545, 0, 3545, 0, 3545, 0, 1161, 0, 1161, 0, 1161, 0, 18576, 0, 18576, 0, 18576, 0, 18576, 18576, 0, 1161, 0, 1161, 0, 18576, 0, 18576, 0, 18576, 0, 18576, 0, 8640, 0, 8640, 0, 8640, 0, 2268, 0, 2268, 0, 2268, 0, 2268, 0, 8640, 8640, 0, 8640, 0, 8640, 0, 8640, 0, 21141, 21141, 0, 18576, 0, 18576, 0, 18576, 0, 18576, 0, 18576, 18576, 0, 1161, 0, 1161, 0, 1161, 0, 5805, 0, 5805, 0, 5805, 0, 5805, 5805, 0, 1161, 0, 1161, 0, 1161, 0, 1161, 0, 1161, 0, 5994, 0, 5994, 0, 1161, 0, 1161, 0, 5994, 5994, 0, 5994, 0, 5994, 0, 4833, 0, 4833, 0, 4833, 0, 4833, 0, 4833, 0, 27, 0, 27, 0, 27, 0, 27, 0, 27, 0, 27, 0, 27, 0, 27, 0, 4833, 4833, 0, 5994, 5994, 0, 5994, 0, 5994, 0, 54, 0, 54, 0, 5994, 5994, 0, 5994, 0, 5994, 0, 5940, 0, 5940, 0, 5940, 0, 5940, 0, 5940, 0, 1134, 0, 1134, 0, 1134, 0, 1134, 0, 1134, 0, 1134, 0, 1134, 0, 1134, 0, 5940, 5940, 0, 5994, 5994, 0, 5994, 0, 5994, 0, 1161, 0, 1161, 0, 1161, 0, 5994, 5994, 0, 5994, 0, 5994, 5994, 0, 1161, 0, 1161, 0, 1161, 0, 1161, 0, 1161, 0, 1161, 0, 5805, 0, 5805, 0, 5805, 0, 5805, 5805, 0, 1161, 0, 1161, 0, 1161, 0, 3545, 3545, 0, 3545, 0, 3545, 3545, 0, 0, 27, 0, 27, 27, 0, 27, 0, 432, 0, 432, 0, 432, 432, 0, 27, 0, 27, 0, 27, 0, 27, 0, 27, 0, 270, 0, 270, 0, 270, 0, 270, 270, 0, 27, 0, 27, 0, 27, 0, 27, 0, 27, 0, 27, 0, 27, 0, 27, 0, 25, 0, 25, 0, 25, 0, 25, 0, 25, 0, 25, 0, 25, 0, 182, 0, 182, 0, 182, 0, 182, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 182, 182, 0, 182, 0, 182, 182, 0, 27, 27, 0, 27, 0, 27, 0, 27, 0, 27, 0, 24, 0, 24, 0, 24, 0, 384, 0, 384, 0, 384, 0, 48, 0, 48, 0, 384, 384, 0, 384, 0, 384, 0, 384, 0, 384, 384, 0, 24, 0, 24, 0, 24, 0, 384, 0, 384, 0, 384, 0, 384, 384, 0, 24, 0, 24, 0, 24, 0, 24, 0, 384, 0, 384, 0, 384, 0, 384, 0, 747, 0, 747, 0, 747, 0, 338, 0, 338, 0, 338, 0, 338, 0, 747, 747, 0, 747, 0, 747, 0, 747, 0, 753, 753, 0, 384, 0, 384, 0, 384, 0, 384, 0, 384, 384, 0, 24, 0, 24, 0, 24, 0, 24, 0, 27, 27, 0, 27, 0, 27, 0, 24, 0, 24, 0, 27, 27, 0, 27, 0, 27, 0, 3, 0, 3, 0, 3, 0, 48, 0, 48, 0, 48, 0, 48, 48, 0, 3, 0, 3, 0, 48, 0, 48, 0, 48, 0, 48, 0, 14, 0, 14, 0, 14, 0, 4, 0, 4, 0, 4, 0, 4, 0, 14, 14, 0, 14, 0, 14, 0, 14, 0, 53, 53, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 48, 0, 3, 0, 3, 0, 3, 0, 15, 0, 15, 0, 15, 0, 15, 15, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 15, 0, 15, 0, 3, 0, 3, 0, 15, 15, 0, 15, 0, 15, 0, 12, 0, 12, 0, 12, 0, 12, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 0, 15, 15, 0, 15, 0, 15, 0, 0, 0, 0, 0, 15, 15, 0, 15, 0, 15, 0, 15, 0, 15, 0, 15, 0, 15, 0, 15, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 15, 15, 0, 15, 15, 0, 15, 0, 15, 0, 3, 0, 3, 0, 3, 0, 15, 15, 0, 15, 0, 15, 15, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 15, 0, 15, 0, 15, 0, 15, 15, 0, 3, 0, 3, 0, 3, 0, 3, 0, 27, 27, 0, 27, 0, 27, 27, 0, 0, 0, 0 };
            var maxheat = heat.Max();
            foreach (var instr in recurse(optimized))
            {
                instr.Heat = heat[instr.CompiledPos] / (double) maxheat;
            }
            foreach (var instr in optimized)
                ConsoleUtil.Write(instr.ToColoredString());
            Console.WriteLine();
#endif

            unsafe
            {
                fixed (sbyte* prg = compiled.ToArray())
                {
                    Console.WriteLine($"Prepare: {Ut.Toc():0.0}s");
                    Ut.Tic();
                    Execute(prg, Console.OpenStandardInput(), Console.OpenStandardOutput(), compiled.Count);
                    Console.WriteLine($"Execute: {Ut.Toc():0.0}s");
                }
            }

            var code = p;
            code = Regex.Replace(code, @"[><]*\[\-\]", "o");

            code = Regex.Replace(code, "[+-]+", "A");
            code = Regex.Replace(code, "[><]+", "M");

            code = code.Replace("AM", "x").Replace("A", "x").Replace("M", "x");
            code = code.Replace("[x]", "A");
            code = code.Replace("[xx]", "B");
            code = code.Replace("[xxx]", "C");
            code = code.Replace("[xxxx]", "D");
            getcounts(code);
            getloops(code);
            code = Regex.Replace(code, @"x?\[x?Ax?\]x?", "E");
            code = Regex.Replace(code, @"x?\[x?Bx?\]x?", "F");
        }

        private static List<sbyte> compile(List<Instr> prog)
        {
            var result = new List<sbyte>();
            void addUshort(int val)
            {
                ushort v = checked((ushort) val);
                result.Add((sbyte) (v & 0xFF));
                result.Add((sbyte) (v >> 8));
            }
            foreach (var instr in prog)
            {
                instr.CompiledPos = result.Count;
                if (instr is AddMoveInstr am)
                {
                    if (am.Add < sbyte.MinValue || am.Add >= i_first)
                        throw new NotImplementedException();
                    result.Add((sbyte) am.Add);
                    result.Add(checked((sbyte) am.Move));
                }
                else if (instr is AddMoveLoopedInstr am2)
                {
                    result.Add(i_addMoveLooped);
                    result.Add(checked((sbyte) am2.Add));
                    result.Add(checked((sbyte) am2.Move));
                }
                else if (instr is MoveZeroInstr mz)
                {
                    result.Add(i_moveZero);
                    result.Add(checked((sbyte) mz.Move));
                }
                else if (instr is SumInstr sm)
                {
                    result.Add(i_sum);
                    result.Add(checked((sbyte) sm.Dist));
                }
                else if (instr is SumArrInstr sma)
                {
                    result.Add(i_sumArr);
                    result.Add(checked((sbyte) sma.Step));
                    result.Add(checked((sbyte) sma.Width));
                }
                else if (instr is AddMultInstr amul)
                {
                    result.Add(i_addMult);
                    result.Add(checked((sbyte) amul.Ops.Length));
                    var total = 0;
                    foreach (var op in amul.Ops)
                    {
                        total += op.dist;
                        result.Add(checked((sbyte) total));
                        result.Add(checked((sbyte) op.mult));
                    }
                }
                else if (instr is FindZeroInstr fz)
                {
                    result.Add(i_findZero);
                    result.Add(checked((sbyte) fz.Dist));
                }
                else if (instr is LoopInstr lp)
                {
                    var body = compile(lp.Instrs);
                    if (body.Count < 255)
                    {
                        result.Add(i_fwdJumpShort);
                        result.Add((sbyte) checked((byte) (body.Count - 0)));
                        foreach (var sub in recurse(lp.Instrs))
                            sub.CompiledPos += result.Count;
                        result.AddRange(body);
                        result.Add(i_bckJumpShort);
                        result.Add((sbyte) checked((byte) (body.Count + 2)));
                    }
                    else
                    {
                        result.Add(i_fwdJumpLong);
                        addUshort(body.Count - 1);
                        foreach (var sub in recurse(lp.Instrs))
                            sub.CompiledPos += result.Count;
                        result.AddRange(body);
                        result.Add(i_bckJumpLong);
                        addUshort(body.Count + 4);
                    }
                }
                else if (instr is OutputInstr)
                    result.Add(i_output);
                else if (instr is InputInstr)
                    result.Add(i_input);
                else
                    throw new Exception();
            }
            return result;
        }

        private static IEnumerable<Instr> recurse(List<Instr> instrs)
        {
            foreach (var instr in instrs)
            {
                yield return instr;
                if (instr is LoopInstr lp)
                    foreach (var i in recurse(lp.Instrs))
                        yield return i;
            }
        }

        static int pos;

        private static IEnumerable<Instr> parse(string p)
        {
            while (pos < p.Length)
            {
                if (p[pos] == '>' || p[pos] == '<')
                {
                    int moves = 0;
                    while (pos < p.Length && (p[pos] == '>' || p[pos] == '<'))
                    {
                        moves += p[pos] == '>' ? 1 : -1;
                        pos++;
                    }
                    yield return new AddMoveInstr { Move = moves };
                }
                else if (p[pos] == '+' || p[pos] == '-')
                {
                    int adds = 0;
                    while (pos < p.Length && (p[pos] == '+' || p[pos] == '-'))
                    {
                        adds += p[pos] == '+' ? 1 : -1;
                        pos++;
                    }
                    yield return new AddMoveInstr { Add = adds };
                }
                else if (p[pos] == '.')
                {
                    pos++;
                    yield return new OutputInstr();
                }
                else if (p[pos] == ',')
                {
                    pos++;
                    yield return new InputInstr();
                }
                else if (p[pos] == '[')
                {
                    pos++;
                    var loop = new LoopInstr { Instrs = parse(p).ToList() };
                    if (p[pos] != ']')
                        throw new Exception();
                    pos++;
                    yield return loop;
                }
                else if (p[pos] == ']')
                    yield break;
                else
                    throw new Exception();
            }
        }

        private static List<Instr> mergeNeighbours<T1, T2>(List<Instr> input, Func<T1, T2, bool> canMerge, Func<T1, T2, Instr> doMerge) where T1 : Instr where T2 : Instr
        {
            var result = new List<Instr>();
            var last = input[0];
            for (int i = 1; i < input.Count; i++)
            {
                if (last is T1 v1 && input[i] is T2 v2 && canMerge(v1, v2))
                {
                    result.Add(doMerge(v1, v2));
                    last = null;
                    i++;
                }
                if (last != null)
                    result.Add(last);
                if (i < input.Count)
                    last = input[i];
            }
            if (last != null)
                result.Add(last);
            return result;
        }

        private static List<Instr> optimize(List<Instr> input)
        {
            var result = new List<Instr>();
            // Merge add-moves
            result = mergeNeighbours<AddMoveInstr, AddMoveInstr>(input, (am1, am2) => am1.Move == 0 && am2.Add == 0, (am1, am2) => new AddMoveInstr { Add = am1.Add, Move = am2.Move });
            // Optimize loop bodies
            for (int i = 0; i < result.Count; i++)
            {
                if (result[i] is LoopInstr lp)
                {
                    lp.Instrs = optimize(lp.Instrs);
                    if (lp.Instrs.Count == 1 && lp.Instrs[0] is AddMoveInstr am && am.Add == -1 && am.Move == 0)
                        result[i] = new MoveZeroInstr { Move = 0 };
                    else if (lp.Instrs.Count == 1 && lp.Instrs[0] is AddMoveInstr am3 && am3.Add == 0)
                        result[i] = new FindZeroInstr { Dist = am3.Move };
                    else if (lp.Instrs.Count == 1 && lp.Instrs[0] is AddMoveInstr am2)
                        result[i] = new AddMoveLoopedInstr { Add = am2.Add, Move = am2.Move };
                    else if (lp.Instrs.Count == 2 && lp.Instrs[0] is AddMoveInstr add1 && lp.Instrs[1] is AddMoveInstr add2 && add1.Add == -1 && add2.Add == 1 && add1.Move == -add2.Move)
                        result[i] = new SumInstr { Dist = add1.Move };
                    else if (lp.Instrs.Count == 3 && lp.Instrs[0] is AddMoveInstr sam1 && sam1.Add == 0 && lp.Instrs[1] is SumInstr si && lp.Instrs[2] is AddMoveInstr sam2 && sam2.Add == 0 && sam1.Move + si.Dist == -sam2.Move)
                        result[i] = new SumArrInstr { Step = sam1.Move, Width = si.Dist };
                    else if (lp.Instrs.All(i => i is AddMoveInstr))
                    {
                        int ptrOffset = 0;
                        int intOffset = 0;
                        var res = new List<(int dist, int mult)>();
                        foreach (var ins in lp.Instrs.Cast<AddMoveInstr>())
                        {
                            if (ptrOffset == 0)
                                intOffset += ins.Add;
                            else if (ins.Add != 0)
                                res.Add((dist: ptrOffset - res.Sum(r => r.dist), mult: ins.Add));
                            ptrOffset += ins.Move;
                        }
                        if (ptrOffset == 0 && intOffset == -1)
                            result[i] = new AddMultInstr { Ops = res.ToArray() };
                    }
                }
            }
            // Merge move-zeroes
            result = mergeNeighbours<AddMoveInstr, MoveZeroInstr>(result, (am, mz) => am.Add == 0, (am, mz) => new MoveZeroInstr { Move = am.Move + mz.Move });

            return result;
        }

        private abstract class Instr
        {
            public int CompiledPos; public double Heat;
            protected ConsoleColor HeatColor => Heat == 0 ? ConsoleColor.Gray : Heat < 0.1 ? ConsoleColor.White : Heat < 0.5 ? ConsoleColor.Cyan : ConsoleColor.Magenta;
            public virtual ConsoleColoredString ToColoredString() => ToString().Color(HeatColor);
            protected static string Ω(int amount, char pos, char neg) => new string(amount > 0 ? pos : neg, Math.Abs(amount));
        }
        private class InputInstr : Instr
        {
            public override string ToString() => ",";
        }
        private class OutputInstr : Instr
        {
            public override string ToString() => ".";
        }
        private class AddMoveInstr : Instr
        {
            public int Add, Move;
            public override string ToString() => Ω(Add, '+', '-') + Ω(Move, '>', '<');
            public override ConsoleColoredString ToColoredString() => $"A{Add}M{Move}".Color(HeatColor);
        }
        private class AddMoveLoopedInstr : Instr
        {
            public int Add, Move;
            public override string ToString() => "[" + Ω(Add, '+', '-') + Ω(Move, '>', '<') + "]";
            public override ConsoleColoredString ToColoredString() => $"[LpA{Add}/M{Move}]".Color(HeatColor);
        }
        private class FindZeroInstr : Instr
        {
            public int Dist;
            public override string ToString() => "[" + Ω(Dist, '>', '<') + "]";
            public override ConsoleColoredString ToColoredString() => $"[FindZ{Dist}]".Color(HeatColor);
        }
        private class SumInstr : Instr
        {
            public int Dist;
            public override string ToString() => "[-" + Ω(Dist, '>', '<') + "+" + (Dist > 0 ? new string('<', Dist) : new string('>', -Dist)) + "]";
            public override ConsoleColoredString ToColoredString() => $"[Sum{Dist}]".Color(HeatColor);
        }
        private class AddMultInstr : Instr
        {
            public (int dist, int mult)[] Ops;  // 2, 1, 3
            public override string ToString() => "[-" + Ops.Select(t => Ω(t.dist, '>', '<') + Ω(t.mult, '+', '-')).JoinString() + Ω(-Ops.Sum(x => x.dist), '>', '<') + "]";
            public override ConsoleColoredString ToColoredString() => $"[AddMul{Ops.Length}]".Color(HeatColor);
        }
        private class SumArrInstr : Instr
        {
            public int Step;
            public int Width;
            public override string ToString() => "[" + (Step > 0 ? new string('>', Step) : new string('<', -Step))
                + "[-" + (Width > 0 ? new string('>', Width) : new string('<', -Width)) + "+" + (Width > 0 ? new string('<', Width) : new string('>', -Width)) + "]"
                + ((Step + Width) > 0 ? new string('<', Step + Width) : new string('>', -Step - Width)) + "]";
            public override ConsoleColoredString ToColoredString() => $"[SumArr{Step},{Width}]".Color(HeatColor);
        }
        private class LoopInstr : Instr
        {
            public List<Instr> Instrs = new List<Instr>();
            public override string ToString() => "[" + string.Join("", Instrs.Select(s => s.ToString())) + "]";
            public override ConsoleColoredString ToColoredString() => "[".Color(HeatColor) + Instrs.Select(i => i.ToColoredString()).JoinColoredString() + "]".Color(HeatColor);
        }
        private class MoveZeroInstr : Instr
        {
            public int Move;
            public override string ToString() => Ω(Move, '>', '<') + "[-]";
            public override ConsoleColoredString ToColoredString() => $"Z{Move}".Color(HeatColor);
        }

        private static void getloops(string pp)
        {
            var loops1 = Regex.Matches(pp, @"\[[^[\]]+\]").Cast<Match>().Select(m => m.Value).ToLookup(x => x).Select(g => new { g.Key, Count = g.Count() }).OrderByDescending(x => x.Count).ToList();
            var loops2 = Regex.Matches(pp, @"\[[^[\]]+\]\w").Cast<Match>().Select(m => m.Value).ToLookup(x => x).Select(g => new { g.Key, Count = g.Count() }).OrderByDescending(x => x.Count).ToList();
            var loops3 = Regex.Matches(pp, @"\w\[[^[\]]+\]").Cast<Match>().Select(m => m.Value).ToLookup(x => x).Select(g => new { g.Key, Count = g.Count() }).OrderByDescending(x => x.Count).ToList();
            var loops4 = Regex.Matches(pp, @"x?\[[^[\]]+\]x?").Cast<Match>().Select(m => m.Value.Replace("x", "")).ToLookup(x => x).Select(g => new { g.Key, Count = g.Count() }).OrderByDescending(x => x.Count).ToList();
        }

        private static void getcounts(string pp)
        {
            // most common double-letter -> new letter
            // [letter] -> new letter
            var counts = new Dictionary<string, int>();
            for (int i = 0; i < pp.Length; i++)
            {
                //var m1 = new Regex(@"\w\w").Match(pp, i);
                //if (m1.Success)
                //    counts.IncSafe(m1.Value);
                //var m2 = new Regex(@"\[\w\]").Match(pp, i);
                //if (m2.Success)
                //    counts.IncSafe(m2.Value);
                var s2 = pp.SubstringSafe(i, 2);
                if (s2.Length == 2 && char.IsLetter(s2[0]) && char.IsLetter(s2[1]))
                    counts.IncSafe(s2);
                var s3 = pp.SubstringSafe(i, 3);
                if (s3.Length == 3 && s3[0] == '[' && char.IsLetter(s3[1]) && s3[2] == ']')
                    counts.IncSafe(s3);
                var s4 = pp.SubstringSafe(i, 4);
                if (s4.Length == 4 && s4[0] == '[' && char.IsLetter(s4[1]) && char.IsLetter(s4[2]) && s4[3] == ']')
                    counts.IncSafe(s4);
            }
            var cc = counts.OrderByDescending(kvp => kvp.Value).ToList();
        }

        private static uint[] heatmap = new uint[10000];

        private const sbyte i_first = 100;
        private const sbyte i_fwdJumpShort = 101;
        private const sbyte i_fwdJumpLong = 102;
        private const sbyte i_bckJumpShort = 103;
        private const sbyte i_bckJumpLong = 104;
        private const sbyte i_output = 105;
        private const sbyte i_input = 106;
        private const sbyte i_moveZero = 107;
        private const sbyte i_addMoveLooped = 108;
        private const sbyte i_sum = 109;
        private const sbyte i_findZero = 110;
        private const sbyte i_nop = 111;
        private const sbyte i_sumArr = 112;
        private const sbyte i_addMult = 113;
        private const sbyte i_end = 122;

        private unsafe static void Execute(sbyte* program, Stream input, Stream output, int progLen)
        {
            var tapeLen = 30_000;
            sbyte* tape = stackalloc sbyte[tapeLen];
            var tapeStart = tape;
            var tapeEnd = tape + tapeLen; // todo: wrap around
            tape += tapeLen / 2;
#if DEBUG
            var progStart = program;
            var progEnd = program + progLen;
#endif
            var outpt = new List<byte>();
            void flushOutput()
            {
                Console.WriteLine($"Hm?! {Ut.Toc()}");
                output.Write(outpt.ToArray());
                Console.WriteLine();
                Console.WriteLine($"Hm?!?! {Ut.Toc()}");
                outpt.Clear();
            }

            while (true)
            {
#if DEBUG
                if (tape < tapeStart || tape >= tapeEnd) throw new Exception();
                if (program < progStart || program >= progEnd) throw new Exception();
                checked { heatmap[program - progStart]++; }
                // heatmap.Take(progLen).JoinString(",")
#endif

                sbyte a = *(program++);
                switch (a)
                {
                    case i_fwdJumpShort:
                        if (*tape == 0)
                            program += *(byte*) program;
                        program++;
                        break;

                    case i_bckJumpShort:
                        if (*tape != 0)
                            program -= *(byte*) program;
                        program++;
                        break;

                    case i_fwdJumpLong:
                        if (*tape == 0)
                        {
                            int dist = *(byte*) (program++);
                            dist |= (*(byte*) program) << 8;
                            program += dist;
                        }
                        program += 2;
                        break;

                    case i_bckJumpLong:
                        if (*tape != 0)
                        {
                            int dist = *(byte*) (program++);
                            dist |= (*(byte*) program) << 8;
                            program -= dist;
                        }
                        program += 2;
                        break;

                    case i_moveZero:
                        tape += *(program++); // move
                        *tape = 0;
                        break;

                    case i_findZero:
                        {
                            sbyte dist = *(program++);
                            while (*tape != 0)
                                tape += dist;
                        }
                        break;

                    case i_sum:
                        {
                            sbyte dist = *(program++);
                            sbyte val = *tape;
                            *(tape + dist) += val;
                            *tape = 0;
                        }
                        break;

                    case i_addMoveLooped:
                        {
                            sbyte add = *(program++);
                            sbyte move = *(program++);
                            while (*tape != 0)
                            {
                                *tape += add;
                                tape += move;
                            }
                        }
                        break;

                    case i_sumArr:
                        {
                            sbyte step = *(program++);
                            sbyte width = *(program++);
                            while (*tape != 0)
                            {
                                tape += step;
                                *(tape + width) += *tape;
                                *tape = 0;
                                tape -= step + width;
                            }
                        }
                        break;

                    case i_addMult:
                        {
                            sbyte num = *(program++);
                            while (num-- > 0)
                            {
                                sbyte dist = *(program++);
                                sbyte mult = *(program++);
                                *(tape + dist) += (sbyte) (mult * *tape);
                            }
                            *tape = 0;
                        }
                        break;

                    case i_input:
                        flushOutput();
                        throw new NotImplementedException();

                    case i_output:
#if DEBUG
                        output.WriteByte(*(byte*) tape);
#else
                        outpt.Add(*(byte*) tape);
#endif
                        break;

                    case i_nop:
                        break;

                    case i_end:
                        flushOutput();
                        return;

                    default:
#if DEBUG
                        if (a >= i_first)
                            throw new Exception();
#endif
                        *tape += a; // add
                        tape += *(program++); // move
                        break;
                }
            }
        }
    }
}
